express – Express.js, often referred to simply as Express, is a minimal and flexible Node.js web application framework designed for building web applications and APIs. 
          It is a popular and widely used framework within the Node.js ecosystem, often considered the de facto standard for server-side development with Node.js. 
          In essence, Express.js simplifies and enhances the process of building server-side applications and APIs with Node.js by providing a structured and efficient way 
          to handle HTTP requests, manage routing, and implement various functionalities through its middleware system.

dotenv/config – automatically loads .env file (containing secrets like MONGO_URI, JWT_SECRET, PORT).

cookie-parser – allows server to read cookies (used for JWT tokens or session IDs).

cors – enables cross-origin requests (important since frontend runs on a different port).

path – helps resolve file paths safely across platforms.

1)authRoutes, 
2)userRoutes, 
3)chatRoutes 
– modular route handlers for authentication, user management, and chat operations.

************************* CORS Middleware ******************
Allows your React frontend (Vite on port 5173) to communicate with backend.
credentials: true lets cookies/JWT tokens be shared securely.


express.json() parses incoming JSON requests.

cookieParser() extracts cookies from client requests.


1️⃣ What is the role of cors() here?
Answer: It enables requests from a different origin (the frontend). Since the React app runs on a different port (5173), CORS allows the browser to make secure API calls 
          and include cookies/tokens.

2️⃣ Why is credentials: true important?
Answer: It lets browsers send authentication cookies (or JWT tokens) with cross-origin requests. Without it, the server can’t identify logged-in users.

5️⃣ What is the use of cookieParser()?
Answer: It parses cookies attached to client requests so they can be accessed via req.cookies. Useful for authentication tokens stored in cookies.

6️⃣ How are frontend routes handled in production?
Answer: All non-API routes (*) serve the index.html file from the React build folder, letting React Router handle client-side navigation.

7️⃣ What is path.resolve() doing here?
Answer: It returns the absolute path of the current directory (__dirname), which is necessary for serving static files correctly.



********************************************************** 1)authRoutes ******************************************
/signup → Registers new users (usually stores hashed passwords, creates tokens).
/login → Verifies credentials, issues authentication token or cookie.
/logout → Clears session/cookie or invalidates token.
These routes are public (no authentication required).

Protected Routes
router.post("/onboarding", protectRoute, onboard);


protectRoute middleware runs first:
Checks if user is authenticated (usually by decoding JWT).
If valid, attaches user info to req.user.

Then calls onboard controller, which completes user setup (e.g., saving preferences, profile info).


Session Check Route
router.get("/me", protectRoute, (req, res) => {
  res.status(200).json({ success: true, user: req.user });
});

Returns the currently logged-in user’s data.

Useful for restoring sessions (e.g., after page refresh, to auto-login).


| Route                  | Auth Required | HTTP | Description                       |
| ---------------------- | ------------- | ---- | --------------------------------- |
| `/api/auth/signup`     | ❌             | POST | Register new user                 |
| `/api/auth/login`      | ❌             | POST | Log user in                       |
| `/api/auth/logout`     | ❌             | POST | Log user out (clear cookie/token) |
| `/api/auth/onboarding` | ✅             | POST | Setup user profile after auth     |
| `/api/auth/me`         | ✅             | GET  | Check if token/session is valid   |







